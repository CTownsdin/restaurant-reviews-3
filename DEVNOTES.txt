---MobX Notes-----------------------------
@inject('MyStore')    works with the provider component, and decorates your
  react component class, to put the store on the props.
@observer   decorates your react component class such that it will dynamically
  update with changes to mobx state
to use an action as defined within the store class, simply access the store.action
  from props
@observable marks the state which should be observed
@computed get FUNCTION    is a get fn defn inside the mobx store class and
  it is used like a property within your react component
<Provider /> component is imported from mob-react of course, and is given the store
  as a prop, and then wraps the <AppMain /> component, and then thru react context
  it provides the mobx store to all the child components.
  In a CRA app, this is customarily handled in the src/index.js file.
A store name should be capitalized, for ex  MyStore.
----
Not using mobx at this time, don't need it at the moment,
as component state is sufficient for this simple app.
-------------------------------------------
[x] Get the basics running on the Main page.
[x] Get the basics running on the Rest's page.
[x] gmap marker links to restaurants working.
[x] Create RestaurantsContainer component.  
[x] Create a Restaurant fn component within the container comp't.
$ npm run dev   :) Yay!
[x] put a restaurant on a card and a fixed size
[x] display 1,2,3 or 4 restaurants per row depending on viewport width
[x] Make the 'All Areas' and 'All Cuisines' selectors work.
  [x] populate the selectors with the selections
  [x] filter state restaurants onSelection
[x] Fix the View Details links
[x] fix the image alt texts
[x] implement favoriting restaurants
[x] App Data Source
---^^^-DONE-^^^---------------------------------------------------------------------------
-----TODO: NEXT --------------------------------------------------------------------------

---Rubric_2--- pass the requirements. @https://review.udacity.com/#!/rubrics/1131/view
GOAL: In order to pass rubric 2, we must be able to load the page, click around, go offline, and do the same clicks.
  [x] added in a CRA style service worker in sw.js.
  
  GOAL: Use Workbox to setup a service worker. So rr's works offline as required.
    Configure Wb like I did in the workbox-lab codelab using a workbox-config.js file to precache routes
      and setup more routes using workbox.strategies, as necessary, for other things more specifically.
  
  Try to do this without ejecting from CRA.
  If it doesn't work without ejecting, then eject from CRA, and then use Workbox, to setup the SW,
    and get this restaurant reviews app working offline.
  

Rubric #3, pass the requirements.
